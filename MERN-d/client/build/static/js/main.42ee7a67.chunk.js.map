{"version":3,"sources":["components/AuthorForm.js","components/AuthorList.js","views/Main.js","views/Detail.js","views/Update.js","App.js","reportWebVitals.js","index.js"],"names":["useState","name","setName","errors","setErrors","onSubmit","e","preventDefault","axios","post","then","res","console","log","catch","err","errorResponse","response","data","errorArr","Object","keys","key","push","message","map","index","type","onChange","target","value","props","removeFromDom","to","border","authors","author","idx","_id","onClick","authorId","delete","setAuthor","loaded","setLoaded","useEffect","get","AuthorList","filter","id","put","App","className","Main","path","Detail","Update","AuthorForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42ee7a67.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nexport default () => {\r\n    //keep track of what is being typed via useState hook\r\n    const [name, setName] = useState(\"\"); \r\n    const [errors, setErrors] = useState([]); \r\n    //handler when the form is submitted\r\n    const onSubmitHandler = e => {\r\n        //prevent default behavior of the submit\r\n        e.preventDefault();\r\n        //make a post request to create a new person\r\n        axios.post('http://localhost:8000/api/createNewAuthor', {\r\n            name,\r\n        })\r\n            .then(res=>console.log(res))\r\n            .catch(err=>{\r\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n                const errorArr = []; // Define a temp error array to push the messages in\r\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                // Set Errors\r\n                setErrors(errorArr);\r\n            })   \r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <form onSubmit={onSubmitHandler}>\r\n            {errors.map((err, index) => <p key={index}>{err}</p>)}\r\n            <p>\r\n                <label>Title</label><br/>\r\n                <input type=\"text\" onChange={(e)=>setName(e.target.value)} value={name}/>\r\n            </p>\r\n            <input type=\"submit\"/>\r\n        </form>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nexport default props => {\r\n\r\n    const { removeFromDom } = props;\r\n    const deleteAuthor = (authorId) => {\r\n        axios.delete('http://localhost:8000/api/authors/' + authorId)\r\n            .then(res => {\r\n                removeFromDom(authorId)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2><Link to=\"/authors/new\">Add Author</Link></h2>\r\n            <center>All Authors</center><center><table border=\"1\">\r\n            {props.authors.map((author, idx)=>{\r\n                // return <p key={idx}>{product.title}, {product.price}, {product.description}</p>\r\n                return <><tr>\r\n                <td key={idx}><Link to ={author._id}>{author.name}</Link>  </td><td>\r\n                <button onClick={(e)=>{deleteAuthor(author._id)}}>\r\n                    Delete\r\n                </button></td><td>\r\n                                <button><Link to={\"authors/\"+author._id+\"/edit\"}>\r\n\t\t\t\t                    Edit\r\n                </Link></button></td>\r\n                </tr>\r\n\t\t\t\t\t</>\r\n            })}\r\n            </table>\r\n            </center>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport AuthorForm from '../components/AuthorForm';\r\nimport AuthorList from '../components/AuthorList';\r\nexport default () => {\r\n    const [authors, setAuthor] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/getAllAuthors')\r\n            .then(res=>{\r\n                setAuthor(res.data);\r\n                setLoaded(true);\r\n            });\r\n    },[])\r\n    const removeFromDom = authorId => {\r\n        setAuthor(authors.filter(author => author._id != authorId));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n         \r\n           <hr/>\r\n           {loaded && <AuthorList authors={authors} removeFromDom={removeFromDom}/>}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\nexport default props => {\r\n    const [author, setAuthor] = useState({})\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/authors/\" + props.id)\r\n            .then(res => setAuthor(res.data))\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <p>Name: {author.name}</p>\r\n            <Link to={\"/authors/\" + author._id + \"/edit\"}>\r\n    Edit\r\n</Link>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nexport default props => {\r\n    const { id } = props;\r\n    const [name, setName] = useState('');\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/authors/' + id)\r\n            .then(res => {\r\n                setName(res.data.name);\r\n\r\n            })\r\n    }, [])\r\n    const updateAuthor = e => {\r\n        e.preventDefault();\r\n        axios.put('http://localhost:8000/api/authors/' + id, {\r\n            name,\r\n\r\n        })\r\n            .then(res => console.log(res));\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Update an Author</h1>\r\n            <form onSubmit={updateAuthor}>\r\n                <p>\r\n                    <label>Name</label><br />\r\n                    <input type=\"text\" \r\n                    name=\"name\" \r\n                    value={name} \r\n                    onChange={(e) => { setName(e.target.value) }} />\r\n                </p>\r\n\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport Detail from './views/Detail';\nimport Update from './views/Update'\nimport AuthorForm from './components/AuthorForm'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n        <Main path=\"/\"/>\n        <Detail path=\"/:id\"/>\n        <Update path=\"authors/:id/edit\"/>\n        <AuthorForm path=\"authors/new\"/>\n        </Router>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}